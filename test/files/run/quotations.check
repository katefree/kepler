y.$up(2)
1.$plus(2)
f(x)
f(x, 1)
x.Y
x.Y
class C extends scala.ScalaObject {
  def <init>() = {
    super.<init>();
    ()
  };
  <empty>
}
class C[T1 >: _root_.scala.Nothing <: _root_.scala.Any, T2 >: _root_.scala.Nothing <: _root_.scala.Any] extends scala.ScalaObject {
  def <init>() = {
    super.<init>();
    ()
  };
  <empty>
}
class C extends scala.ScalaObject {
  def <init>() = {
    super.<init>();
    ()
  };
  val x = 42
}
class C extends scala.ScalaObject {
  <paramaccessor> private[this] val x: Int = _;
  def <init>(x: Int) = {
    super.<init>();
    ()
  };
  def <init>() = {
    <init>(0);
    ()
  }
}
object M extends scala.ScalaObject {
  def <init>() = {
    super.<init>();
    ()
  };
  <empty>
}
object M extends scala.ScalaObject {
  def <init>() = {
    super.<init>();
    ()
  };
  def x() = "111"
}
val v = 1
val v = 2.$times(y).$minus(4)
val v: Int = 1
def x() = ()
def x[T >: _root_.scala.Nothing <: ScalaObject]() = ()
def id(y: Int) = y
def x() = println("in def")
class C[T >: _root_.scala.Nothing <: _root_.scala.Any] extends scala.ScalaObject {
  def <init>() = {
    super.<init>();
    ()
  };
  <empty>
}
class C[List[Int >: _root_.scala.Nothing <: _root_.scala.Any] >: _root_.scala.Nothing <: _root_.scala.Any] extends scala.ScalaObject {
  def <init>() = {
    super.<init>();
    ()
  };
  <empty>
}
class C[T >: Nothing <: ScalaObject] extends scala.ScalaObject {
  def <init>() = {
    super.<init>();
    ()
  };
  <empty>
}
import scala.reflect._
class C extends T2 with scala.ScalaObject {
  def <init>() = {
    super.<init>();
    ()
  };
  <empty>
}
abstract trait T extends scala.AnyRef { s => 
  <empty>
}
{
  val x = "x";
  val y = "y"
}
z match {
  case scala.Tuple2(x, y) => ()
}
z match {
  case scala.Tuple2(x, y) if x.$eq$eq(y) => ()
}
z match {
  case scala.Tuple2(x, _) => println("match succedeed")
}
x match {
  case (1| 2) => "ok"
  case _ => "fail"
}
x match {
  case List((1)*) => ()
}
((x: Int) => println(x))
((x: Int) => println(x))
x = null
x = null
if (x.$eq$eq(0))
  0
else
  y.$div(x)
if (x.$eq$eq(0))
  0
else
  y.$div(x)
if (x.$eq$eq(0))
  0
else
  y.$div(x)
x match {
  case 1 => ()
}
return 1
try {
  println("block")
} catch {
  case (e @ _) => println(e)
} finally println("finally")
try {
  println("block")
} finally println("finally")
throw new Exception()
new String("s")
(x: String)
(x: String)
f(x: @unchecked)
f(x: @unchecked)
(x: List[Int])
(x: List[Int])
abstract trait X[T >: Tlo <: _root_.scala.Any] extends scala.AnyRef {
  <empty>
}
abstract trait X[T >: _root_.scala.Nothing <: Thi] extends scala.AnyRef {
  <empty>
}
(x: TQual#TName)
(x: TQual#TName)
def f[T >: _root_.scala.Nothing <:  {
  val x = 1
}](): scala.Unit = ()
(x: T1[_$1] forSome { 
  <synthetic> type _$1 >: _root_.scala.Nothing <: _root_.scala.Any
})
(x: T1[_$1] forSome { 
  <synthetic> type _$1 >: _root_.scala.Nothing <: T2
})
